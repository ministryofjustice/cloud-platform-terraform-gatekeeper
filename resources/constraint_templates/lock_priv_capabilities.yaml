apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: lockprivcapabilities
  annotations:
    metadata.gatekeeper.sh/title: "Lock capabilities for namespaces with psa - PSA"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Controls Linux capabilities on containers on psa labels with privileged. This is to ensure the namespaces are locked down to the same level as they were when custom PSPs were implemented. This corresponds to the
      `allowedCapabilities` and `requiredDropCapabilities` fields in a PodSecurityPolicy.
spec:
  crd:
    spec:
      names:
        kind: LockPrivCapabilities
      validation:
        openAPIV3Schema:
          type: object
          description: >-
            Controls Linux capabilities on containers. Corresponds to the
            `allowedCapabilities` and `requiredDropCapabilities` fields in a
            PodSecurityPolicy. For more information, see
            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities
          properties:
            allowedCapabilities:
              type: array
              description: A list of Linux capabilities that can be added to a container.
              items:
                type: string
            requiredDropCapabilities:
              type: array
              description: A list of Linux capabilities that are required to be dropped from a container.
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package lockprivcapabilities

        import data.lib.exclude_update.is_update

        violation[{"msg": msg}] {
          # spec.containers.securityContext.capabilities field is immutable.
          not is_update(input.review)

          container := input.review.object.spec.containers[_]
          has_disallowed_capabilities(container)
          msg := sprintf("container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
        }

        violation[{"msg": msg}] {
          not is_update(input.review)
          container := input.review.object.spec.containers[_]
          missing_drop_capabilities(container)
          msg := sprintf("container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
        }



        violation[{"msg": msg}] {
          not is_update(input.review)
          container := input.review.object.spec.initContainers[_]
          has_disallowed_capabilities(container)
          msg := sprintf("init container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
        }

        violation[{"msg": msg}] {
          not is_update(input.review)
          container := input.review.object.spec.initContainers[_]
          missing_drop_capabilities(container)
          msg := sprintf("init container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
        }



        violation[{"msg": msg}] {
          not is_update(input.review)
          container := input.review.object.spec.ephemeralContainers[_]
          has_disallowed_capabilities(container)
          msg := sprintf("ephemeral container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
        }

        violation[{"msg": msg}] {
          not is_update(input.review)
          container := input.review.object.spec.ephemeralContainers[_]
          missing_drop_capabilities(container)
          msg := sprintf("ephemeral container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
        }


        has_disallowed_capabilities(container) {
          allowed := {c | c := lower(input.parameters.allowedCapabilities[_])}
          not allowed["*"]
          capabilities := {c | c := lower(container.securityContext.capabilities.add[_])}

          count(capabilities - allowed) > 0
        }

        missing_drop_capabilities(container) {
          must_drop := {c | c := lower(input.parameters.requiredDropCapabilities[_])}
          all := {"all"}
          dropped := {c | c := lower(container.securityContext.capabilities.drop[_])}

          count(must_drop - dropped) > 0
          count(all - dropped) > 0
        }

        get_default(obj, param, _) := obj[param]

        get_default(obj, param, _default) := _default {
          not obj[param]
          not obj[param] == false
        }
      libs:
        - |
          package lib.exclude_update

          is_update(review) {
              review.operation == "UPDATE"
          }
